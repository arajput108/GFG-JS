**********************************Unit=1 BASICS OF JS****************************************

// <<<<<<<<<<<=======DATA TYPES=========>>>>>>>>>>

// Primitive Data type= When a single value is assigned to a var is called as Primtive data type.
// Non-Primitive Data type= When multiple values can be assigned to a data type is called Non-Primtive data type.

//<---------STRING------->
// var result;
// result= "Testing 1 2 3";
// result= "Testing 101 401 501"; value updated 

// console.log(result);
//<---------------->

// let table;
// table= "Testing 3 4 5";

// console.log(table);
//<----------------->

// let text;
// text= " JS is best !!";

// console.log(text);

//<--------NUMBER------->
// let age= 22;
// console.log(age);
// console.log(typeof age);

//<--------BOOLEAN--------->
// let productinCart= false;
//if the product is adde in cart= True, otherwise False
// console.log(productinCart);

//<--------UNDEFINED--------->
// let userName;
// console.log(typeof userName);

//<--------NULL--------->
// let noValue= null;
// console.log(noValue);
// console.log(typeof noValue);

//<--------OBJECT(npdt)--------->
// const Mydetails= {F_name: "Aakash", L_name: "Rajput", Lang:"JavaScript", Domain:"Cyber Sec"}
// console.log(Mydetails);

//let numbers= [1,2,3,4,5,6,7];
//console.log(typeof numbers);

//<--------CONCATENATION--------->
// let myName= "Mike";
// let myAge= 25;
// let print= "This side " + myName + " speaking" + " and my Age is "+ myAge;
// console.log(print);

//-----TEMPLATE LITERAL------
// let speakerName= "Bravo"; 
// let userFrequency= 99.8;

// let finalFrequency= `This side ${speakerName} speaking from frequency of ${userFrequency}`;
// console.log(finalFrequency);

// let text = `My name is ${speakerName} and I am ${userFrequency} years old.`;
// console.log(text);

// let multilines= `ॐ नमः पार्वती पतये हर हर महादेव देव
// सियाव्वर रामचन्द्र जी की जय
// राजा रामचन्द्र जी की जय
// बोल बजरंग बली की जय
// ॐ विष्णुपताय नमः 
// जय श्री राम `;

// console.log(multilines);


// <<<<<<<<<<<=======ARITHMETIC OPERATORS=========>>>>>>>>>>
// const a= 'Fire';
// const b= 'Earth';

// console.log(a+b);
// console.log(a-b);
// console.log(a*b);
// console.log(a/b);
// console.log(a%b);
// console.log(a**b);
// console.log(a ** 2);
// console.log(b ** 4); 
// NaN= It stands for "Not a Number". when the var are not no.

// <<<<<<<<<<<=======TYPE CONVERSIONS=========>>>>>>>>>>
//Type Conversion to Number, string & Boolean
// const a= 5;
// const b= 7;

// console.log(Number(a) + Number(b)); 
// console.log(Number("5") - Number("7"));

// const c= Number(a);
// const d= Number(b);
// console.log(c + d);

// const c= String(a); //"a";
// const d= String(b); //("b");

// console.log(typeof a);
// console.log(typeof b);
// console.log(typeof c);
// console.log(typeof d);

//-----Boolean Conversion------
// console.log(Boolean(a));
// console.log(Boolean(""));


// <<<<<<<<<<<=======READLINE-SYNC=========>>>>>>>>>>
/**
 * Read data from user
 */
const readlineSync= require("readline-sync");
// Now we'll ask smthing from the user.
readlineSync.question("May I know your name? ")

// const userName= realineSync.question("May I know your name? ");
// const userAge= realineSync.question("May I know your age? ");
// console.log(userName);
// console.log("Thank you for providing age..");

--------------------------------------------------------<<NOTE 1:>>----------------------------------------------------------------
In JavaScript, the == operator is known as the equality operator, which performs type coercion if the operands are of different types before comparing their values. On the other hand, the === operator is known as the strict equality operator, which does not perform type coercion and checks if both the values and types of the operands are the same.

Let's break down why "01" == 1 evaluates to true and "01" === 1 evaluates to false:

"01" == 1:

Here, the string "01" is being compared to the number 1.
JavaScript performs type coercion because the operands are of different types (string and number).
During type coercion, the string "01" is converted to a number.
After conversion, both operands have the same type (number), and their values are equal (1).
So, the result of the comparison is true.
"01" === 1:

Here, the strict equality operator === is used, which does not perform type coercion.
Since the operands are of different types (string and number), they are not considered equal under strict equality.
The string "01" is not equal to the number 1 when both the value and type are compared.
So, the result of the comparison is false.
In summary, "01" == 1 evaluates to true because JavaScript performs type coercion, converting the string "01" to a number before comparison. However, "01" === 1 evaluates to false because the strict equality operator does not perform type coercion, and the operands are of different types.
------------------------------------------------------------------------------------------------------------------------------------

**********************************Unit=2 JavaScript Fundamentals****************************************

// <<<<<<<<<<<=======Comparison Operators=========>>>>>>>>>>

// console.log(50 > 30);
// console.log(70 < 40);

// console.log(70 <= 70); 
// console.log(70 >= 70);
// in both, js checked the 1st op & then 2nd op and answer accordingly.

//________Equal to (==)_________
//console.log(50 == 50); ____call as Equality check.

//________STRING_______
//for no.s console.log(30==30);
// console.log("apple" > "grapes");
// console.log("glowing" > "glow");
// In string JS will compare each value to the other one and subseqently it will print the result, depedning upon the result whoever will have the highest no. of letters.

//(1)console.log("01" > 1);
//JS convert the string into no. then compare 2>1, where 2 is greater.

//(2)console.log("01" == 1);  (Refer to Note1)
// again, JS convert into strings & check.
//Double operator= It doesn't check the typeof value over here is no. [==, ===, !==, !==, >, <, >=, <=]

/** _______STRICT EQUALITY OPERATOR (===)____ */
//(1)console.log("01" === 1);
// Comparison of No. with string will always false.

//(2)console.log("01" !== 1);

//(3)console.log(null == undefined);
//undefined is a value assigned to a var when no value is assigned.

//(4)console.log(undefined == 45);
//UNdefined here will always be false except NULL. 

//(5)console.log(null === undefined);
//null is nothing but undefined is some value.

//(6)console.log(null > 0);

//(7)console.log(null < 1); 
// False, cause null becomes 0 and then compared to 1.

//(8)console.log(null >= 0);
// True, cause null isn't greater than 0 but yes = to 0.

//(9)console.log(null == 0);
//false, cause null here is null as it is being compared with 0.

//console.log("3" <= "5"); 
//console.log("mango" > "banana"); --> True 
//console.log("2" > "3");--> false
//console.log(undefined == null);-->True 
//console.log(null == undefined);-->True
//console.log(null < 1);--> True

// <<<<<<<<<<<=======Conditonal Statements=========>>>>>>>>>>

1.) if (condition/expression) {
     body/action to be
    }

2.) if(true) {
     console.log("Hello, this is Mike Vajra speaking");
    }

3.) const readlineSync= require("readline-sync");
    const userAge= readlineSync.question("May I know your age? ");

    if(userAge >= 18){
        console.log("Your're eligible for voting!!");
    }
    else { 
        console.log("No, You're not elgible for voting....");
    }

4.) const readlineSync= require("readline-sync");
    const number= Number(readlineSync.question("Enter a number: "));

    const remainder= number % 7;
    if (remainder===0){
        console.log("Fizz")
    }
 

5.) const readlineSync= require("readline-sync");
    const number= Number(readlineSync.question("Enter a number: "));

    const remainderAfterDivisionBySeven= number % 7;
    const remainderAfterDivisionByEight= number % 8;

    if (remainderAfterDivisionBySeven===0 && remainderAfterDivisionByEight===0){
        console.log("By 7");
    } 
    else if(remainderAfterDivisionBySeven===0 || remainderAfterDivisionByEight===0) {
        console.log("By 8");
    }
    else{
           console.log("Number is not divisbile by 7 or 8");
    }

// <<<<<<<<<<<=======Nested Loop=========>>>>>>>>>>

const readlineSync= require("readline-sync");

const number= Number(readlineSync.question("Enter a number:"));
//Number writing here ao that JS takes it as no. rather than string;

const remainder= number % 2;

if (remainder=== 0){
    console.log(`${number} is even`);
    if (number % 4===0){
        console.log(`${number} is divisible by 4.`);
    }
    else{
        console.log(`${number} isn't divisible by 4.`)
    }
}
else{
    console.log(`${number} is odd`);
    if(number % 5===0){
        console.log(`${number} is divisible by 5.`);
    }
    else{
        console.log(`${number} isn't divisible by 5.`);
    }
}
//console.log(number);


// <<<<<<<<<<<=======Ternary Operators- 1=========>>>>>>>>>>
It is a short form of writing a if else condition, where we don;t use the syntax, the users in packages, 
if else if and else keyword. But we use 2 operator, which are question mark, and the code.

(totalMarksScored < 40)  ? console.log("Work hard chap!!"): console.log("Bravo, You're passed.")

const totalMarksScored= 70;

//Using if else in normal way
// if (totalMarksScored < 40) {
//     console.log("Work hard chap !!");
// }
// else{
//     console.log("You're passed.")
// }

//Using Ternary Operator
 
//(totalMarksScored < 40)  ? console.log("Work hard chap!!"): console.log("Bravo, You're passed.")

//optimised code:-
const result= totalMarksScored < 40 ? "Work hard chap!!" : "Bravo, You're passed."
console.log(result);

// <<<<<<<<<<<=======Ternary Operators- 2=========>>>>>>>>>>
