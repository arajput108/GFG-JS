*********************************Unit=3 Functional Programming****************************************

Functions= It is the heart of any programming language. We can use 'n' no. of resuable code.

<<<<<<<<======Function Declaration======>>>>>>>>

*calling the function in this way

1.) function greetMssg(name) {      // Name is called as Parameter.
    console.log("Namaste..!!");
    }
    greetMssg("Aakash"); //Aakash is called as an Argument.


//After declaring the func we can call it from anywhere.

Note:- JS codes run in 2 phases:-
        Memory Allocation- It'll scan all the code and check for all the var & func presence.
        Execution Phase- It'll run the code line by line.

2.) function greetMssg(name) {
    console.log(`${name}, Namaste...!!`);
    }

    greetMssg("Aakash");
    greetMssg("Ayush");
    greetMssg("Aryan");

3.) function greetMssg(name,city) {
    console.log(`${name}, Namaste...!!`);
    console.log(`Thank you for joining us from, ${city}..!!`);
    }

    greetMssg("Aakash", "Noida");
    greetMssg("Ayush", "New Delhi");
    greetMssg("Aryan", "Hyderabad");

3.) WAF to calculate the SubmitEvent(min, max) {
    function calculateSum(min, max){
        for(let i=min; i<=max; i++){
            console.log(i);
        }
    }
    calculateSum(1, 5);

//<<<<<<<<======Anonymous Function======>>>>>>>>
:-  Which don't have any identity or name.

1.) let AnonymousFunction= function (){   //  AnonymousFunction here is no longer a var it is func now/
        console.log("Namaste..!!");
    }
    AnonymousFunction();
    console.log(typeof  AnonymousFunction);

2.) Named Function expression= NFE) is a JavaScript function expression that has a name. Unlike regular function expressions, where the function itself may be anonymous (i.e., the function does not have a name), named function expressions provide a name to the function.

    Ex:- var AnonymousFunction= function greetMssg (){   //  AnonymousFunction here is no longer a var it is func now/
        console.log("Namaste..!!");
        console.log(typeof greetMssg);

        }
        AnonymousFunction();
        console.log(typeof AnonymousFunction);

    *Named function expressions have several benefits:
    Self-referencing: The name of the function expression can be used within the function's body to refer to itself recursively or for other purposes.

    Improved stack traces: When debugging, having named function expressions can provide more descriptive function names in stack traces, aiding in identifying the source of errors.

    Readability and maintainability: Giving a name to a function expression can improve code readability and maintainability, especially when dealing with complex or nested functions.


//<<<<<<<<======Return & Undefined======>>>>>>>>
1.) function calculateSum(x, y){
    console.log(x+ y);
}
calculateSum(10, 20);

//If I want to use the return value then I need to use the return keyword. 
//Return simply returns the value no matter where we're using that return value.
function calculateSum(x, y){
    return x + y;
}
console.log(calculateSum(10, 20));    


Note:- a.) Pure function is a parameter which will accept a parameter it won't change the parameter. 
           It'll keep it here and always return a value.
       b.) Return basically means to end the function.


2.) 
function calculateSum(x,y) {
    return x+y;
}
const result= calculateSum(15,46);
console.log(result);

const op= calculateSum(86,37);
console.log(op);
console.log(typeof op);
console.log(typeof result);
console.log(typeof calculateSum);


//<<<<<<<<======Arrow Function======>>>>>>>>

Normal function:- const calculateSum= function(x,y){
                      return x+y;
                  }

Arrow Function:- const calculateAddition= (x,y)=>{
                   return x+y;
                 }

                 const calculateAddition= (x,y) => x-y

                 console.log(calculateSum(16,18));

                 console.log(calculateAddition(19,17));


*Fat Arrow Function(=>):- A fat arrow function, also known as an arrow function or lambda function, is a concise way to write 
                      anonymous functions in JavaScript. It was introduced in ECMAScript 6 (ES6).
                      ex- a) function add(a, b) {
                                return a + b;
                            }                           //Regular function
                          b) const add = (a, b) => {
                                return a + b; 
                            };                          //Fat Arrow function

1.) const calculateSum= function(x,y){
    return x+y;
}


// const calculateAddition= (x,y)=>{
//     return x+y;
// }

const calculateAddition= (x,y) => x-y
//console.log(calculateSum(16,18));

console.log(calculateAddition(19,17));


const calSumAgreaterB= (a,b) => {
    if(a>b){
        return a+b;
    }
    else{
        return a-b;
    }
}
console.log(calSumAgreaterB(96,77));

Ternary Operator:- const sum= (a,b)=> a>b ? a+b : a-b;
                   console.log(sum(96,77))       

                   
                  b.)  const sum= (a,b)=> a>b ? a+b : a-b;

                   const op= Sum(13,25);
                   console.log(op);




const Sum= (a,b)=> a>b ? a+b : a-b;
// console.log(sum(96,77))

const op= Sum(13,25);
console.log(op);

function TotalXandY(x,y){
    if(x > y){
        return x+y;
    }
    else{
        return x-y;
    }
}

//<<<<<<<<======Function Exercise======>>>>>>>>

1.) //find the sum of all numbers from 1-20

function calSum(min, max){
    let total= 0;
    for (let i= min; i<=max; i++){
        total= total + i;
    }
    //console.log(total);
    return total;
}

const result= calSum(1,20);
console.log(result);

const op= calSum(20,25);
console.log(op);

// //find the sum of all numbers from 1-20

// function calSum(min, max){
//     let total= 0;
//     for (let i= min; i<=max; i++){
//         total= total + i;
//     }
//     //console.log(total);
//     return total;
// }

// const result= calSum(1,20);
// console.log(result);

// const op= calSum(20,25);
// console.log(op);





function greet(name){
    console.log(`${name}, Welcome to GFG!`);
}
greet("Geek");




function rem(x,y){
    console.log(x%y);
}
rem(12,5);

function rem(x,y){
    return(x%y);
    console.log("Hey");
}
console.log(rem(12,11));



let utility= (a,b) => (a*b)*(a%b);

console.log(utility(12,11));















// //<<<<<<<<======Anonymous Function======>>>>>>>>

// var AnonymousFunction= function greetMssg (){   //  AnonymousFunction here is no longer a var it is func now/
//     console.log("Namaste..!!");
//     console.log(typeof greetMssg);
// }
// AnonymousFunction();
// console.log(typeof  AnonymousFunction);






2.) let data= 7
while(data>=0)
{
    if(data<=5){
        data--;
        continue;
    }
    console.log(data);
    data--;
}

3.) for(let i=1; ;i++){
    let data= i*5;
    console.log(data);
    if(data>=30)
    break;
}

4.) how many times loop iterate in the  loop?       
const str= "GeeksForGeeks";
for(let i= 0; i<str.length; i++){
    console.log(username[i])
}

5.) let sum= 0;
const n= 100

for(let i= 1; i<=n; i++){
    sum+= i
}
console.log('sum:', sum);
o/p= 550


6.) 
